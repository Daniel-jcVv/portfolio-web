Este tutorial de PedroTech ofrece una guía **completa y detallada para construir un sitio web de portafolio personal moderno** con una interfaz de usuario (UI) excepcional, utilizando **React.js y Tailwind CSS**.

Aquí tienes un resumen detallado de lo cubierto en el tutorial:

**1. Características del Portafolio Final**:
*   Una **barra de navegación (navbar) responsiva** y atractiva.
*   Un **fondo interactivo** que simula el espacio, con partículas que representan estrellas y una lluvia de meteoritos.
*   Una sección "Sobre mí" para presentarse.
*   Una sección de habilidades dinámica que lista las capacidades técnicas.
*   Un área para mostrar proyectos impresionantes.
*   Una sección de contacto para nuevas oportunidades.
*   **Animaciones geniales** en todo el sitio para impresionar a los reclutadores.
*   Funcionalidad para **cambiar entre modo claro y oscuro**.

**2. Tecnologías y Librerías Utilizadas**:
*   **React.js**: La biblioteca principal de JavaScript.
*   **Tailwind CSS**: Para un diseño de interfaz de usuario rápido y eficiente, utilizando la **versión 4**.
*   **Vite**: Como herramienta de construcción para aplicaciones React.
*   **npm**: Como gestor de paquetes.
*   **Lucid React**: Una biblioteca de iconos.
*   **React Router DOM**: Para el enrutamiento de la aplicación (aunque es una SPA, maneja una página 404).
*   **Tailwind Merge**: Utilidad para combinar nombres de clases de Tailwind de forma sencilla.
*   **clsx**: Para construir cadenas de nombres de clases condicionalmente.
*   **Radix UI**: Específicamente el componente `react-toast` para notificaciones "toaster".

**3. Configuración del Proyecto**:
*   El tutorial utiliza **VS Code** como entorno de desarrollo.
*   **Inicialización del proyecto con Vite**: `npx create vite` y selección de React con **JavaScript** (se explica que TypeScript no es crucial para un portafolio simple sin mucha interacción de usuario, aunque se recomienda en la mayoría de los casos).
*   **Instalación y configuración de Tailwind CSS**:
    *   Instalación de `tailwindcss` y `tailwindcss/vite-plugin`.
    *   Importación del plugin en `vite.config.js`.
    *   Inclusión de las directivas de Tailwind en `index.css` y eliminación de `app.css`.
*   **Configuración de alias en Vite**: Creación de un alias `@` para la carpeta `src` en `vite.config.js` para simplificar las importaciones.
*   **Instalación de librerías adicionales**: `npm install lucid-react react-router-dom tailwind-merge @radix-ui/react-toast clsx`.

**4. Estructura y Construcción del Sitio Web**

El proyecto se estructura en componentes y secciones, con un enfoque en la definición de estilos globales y utilidades de Tailwind en `index.css` para la personalización y la adaptabilidad a temas claros/oscuros.

*   **Estilo y Tema Global (`index.css`)**:
    *   Se eliminan los estilos predeterminados de `app.css`.
    *   Se definen **variables de color personalizadas** (ej., `color-border`, `background`, `foreground`, `primary`, `secondary`, `card`) utilizando HSL, con versiones separadas para **temas claro y oscuro**.
    *   Se definen **animaciones personalizadas** (ej., `fade-in`, `float`, `pulse-subtle` para las estrellas, `meteor` para los meteoritos) con sus `keyframes` correspondientes.
    *   Se crean **clases de utilidad de Tailwind** (`utility classes`) que encapsulan múltiples estilos para reutilización, como `container`, `text-glow`, `card-hover`, `gradient-border`, `cosmic-button`, `star` y `meteor`.
    *   Se aplican estilos base a elementos como `*` (asterisco), `html` y `body` para asegurar un `scroll-smooth`, colores de fondo y primer plano, y transiciones globales.

*   **Componentes Principales y Secciones** (en orden de construcción):

    *   **Enrutamiento (`app.jsx`)**:
        *   Uso de `BrowserRouter` y `Routes` de React Router DOM.
        *   Se definen dos rutas: la principal (`/`) que renderiza el componente `Home`, y una ruta `*` para manejar páginas no encontradas (`NotFoundPage`).

    *   **Activador de Tema (`ThemeToggle.jsx`)**:
        *   Un botón que cambia un estado `isDarkMode` y actualiza la lista de clases del documento (`document.documentElement.classList.add/remove('dark')`) para aplicar el tema oscuro.
        *   Utiliza el **almacenamiento local (localStorage)** para persistir la preferencia del tema del usuario incluso al recargar la página o abrir nuevas pestañas.
        *   Implementa una función de utilidad `cn` (que usa `clsx` y `tailwind-merge`) para construir nombres de clases de Tailwind de forma más legible y organizada.

    *   **Fondo de Estrellas (`StarBackground.jsx`)**:
        *   Genera un número dinámico de estrellas basado en el tamaño de la ventana (ancho x alto / 10,000).
        *   Cada estrella tiene propiedades aleatorias: ID, tamaño (1-4px), posición (X, Y porcentual), opacidad (0.5-1), y duración de animación (2-6 segundos).
        *   Aplica la clase `star` (definida en `index.css`) y la animación `animate-pulse-subtle` a cada estrella.
        *   Genera un número fijo de meteoritos (4) con propiedades aleatorias para el tamaño, posición, retraso y duración de la animación.
        *   Aplica la clase `meteor` y la animación `animate-meteor` a cada meteorito.
        *   Incluye un **`event listener` para `resize` de la ventana** para regenerar las estrellas y meteoritos y adaptarlos a pantallas más pequeñas, evitando el "desorden" visual.

    *   **Barra de Navegación (`Navbar.jsx`)**:
        *   Define una lista de elementos de navegación (`navItems`) con nombres y `href` que apuntan a IDs de sección (ej., `#hero`, `#about`).
        *   Detecta el **desplazamiento (scroll)** para aplicar un efecto de "cristal" (fondo borroso y semitransparente) cuando el usuario se desplaza más allá de la altura de la navbar.
        *   Incluye un **logotipo con un efecto de brillo** (`text-glow`).
        *   Implementa versiones de escritorio (links horizontales) y móvil (menú vertical oculto/visible).
        *   El menú móvil tiene un botón de alternancia (icono de hamburguesa/X) y cierra automáticamente el menú al hacer clic en un enlace.

    *   **Sección Hero (`HeroSection.jsx`)**:
        *   Se le asigna un `ID="hero"` para el enrutamiento.
        *   Contiene un título (`H1`) con el nombre del autor (`Hi I'm Pedro Machado`), donde cada parte del texto tiene un color diferente y una animación de aparición con un retraso secuencial (`animate-fade-in`, `animate-fade-in-delay-one`, etc.).
        *   Un párrafo de biografía con una animación de aparición retrasada.
        *   Un botón "View my work" (Ver mi trabajo) que utiliza la clase de utilidad `cosmic-button` y enlaza a la sección de proyectos.
        *   Un indicador "Scroll" con un icono de flecha que rebota (`animate-bounce`) para alentar al usuario a desplazarse hacia abajo.

    *   **Sección Sobre Mí (`AboutSection.jsx`)**:
        *   Se le asigna un `ID="about"`.
        *   El título "About Me" divide el texto en dos colores.
        *   Diseño de cuadrícula responsivo: a la izquierda, una descripción personal y botones ("Get in touch", "Download CV"); a la derecha, tarjetas que representan habilidades o rasgos.
        *   Las tarjetas utilizan las clases de utilidad `gradient-border` y `card-hover`, y contienen iconos de Lucid React (ej., `Code`, `Briefcase`).

    *   **Sección Habilidades (`SkillsSection.jsx`)**:
        *   Se le asigna un `ID="skills"`.
        *   Lista predefinida de habilidades con nombre, nivel (0-100) y categoría (Frontend, Backend, Tools).
        *   **Filtros de categoría**: Botones interactivos ("All", "Frontend", "Backend", "Tools") que actualizan el estado `activeCategory` para filtrar las habilidades mostradas.
        *   Las habilidades se muestran en un diseño de cuadrícula responsivo (1, 2 o 3 columnas).
        *   Cada habilidad incluye su nombre y una **barra de progreso visual** que representa el `level` de la habilidad, animándose con `animate-grow`.

    *   **Sección Proyectos (`ProjectsSection.jsx`)**:
        *   Se le asigna un `ID="projects"`.
        *   Datos de proyectos predefinidos que incluyen título, descripción, ruta de imagen (desde la carpeta `public/projects`), y una lista de etiquetas (tags).
        *   Los proyectos se muestran en una cuadrícula responsiva (1, 2 o 3 columnas).
        *   Cada proyecto es una "tarjeta" (`card`) con `card-hover` y una imagen de banner que tiene un efecto de escala al pasar el cursor (`group-hover:scale-110`).
        *   Muestra las etiquetas del proyecto como "píldoras".
        *   Incluye enlaces a la demo del proyecto y al repositorio de GitHub (con iconos de Lucid React como `ExternalLink` y `GitHub`).
        *   Un botón "Check my GitHub" al final de la sección que enlaza al perfil general de GitHub del autor.

    *   **Sección Contacto (`ContactSection.jsx`)**:
        *   Se le asigna un `ID="contact"`.
        *   Dividida en dos columnas: información de contacto y un formulario de contacto.
        *   **Información de contacto**: Correo electrónico, número de teléfono y ubicación, cada uno con su icono (`Mail`, `Phone`, `MapPin`) y enlaces interactivos (ej., `mailto:`, `tel:`).
        *   **Redes sociales**: Enlaces a LinkedIn, Twitter y Twitch con sus respectivos iconos.
        *   **Formulario de contacto**: Campos para "Your Name" (tu nombre), "Your Email" (tu correo electrónico) y "Your Message" (tu mensaje).
        *   Estilos de entrada con efectos de enfoque personalizados.
        *   Botón de envío con estado "Send Message" (Enviar mensaje) / "Sending" (Enviando) y deshabilitado durante el envío.
        *   **Integración de `Radix UI react-toast`**: Para mostrar una notificación "Message Sent" (Mensaje enviado) con una descripción de confirmación después de un envío simulado (se menciona que para un envío real se necesitaría una API de correo electrónico como Email.js). Los componentes del toaster y el hook `useToast` se copian directamente de la librería en carpetas `UI` y `hooks`.

    *   **Pie de Página (`Footer.jsx`)**:
        *   Muestra el aviso de copyright (ej., "© 2025 pedro.tech.co All Rights Reserved").
        *   Incluye un botón "scroll to top" (desplazarse hacia arriba) con un icono de flecha (`ArrowUp`) que lleva de vuelta a la sección "Hero".

**5. Despliegue del Proyecto**:
*   Se recomienda el despliegue a través de **Vercel** por su facilidad y automatización.
*   El proceso implica:
    1.  Inicializar un repositorio Git local y subir el código a GitHub.
    2.  Iniciar sesión en Vercel.com (preferiblemente con la cuenta de GitHub).
    3.  Importar el repositorio de GitHub en Vercel; Vercel reconoce automáticamente las aplicaciones Vite.
    4.  Hacer clic en "Deploy" (desplegar) para que Vercel construya y ponga el sitio en línea.
*   Vercel ofrece **redespliegues automáticos** cada vez que se detectan cambios en el repositorio de GitHub.
*   Se menciona que también se podría usar GitHub Pages, pero Vercel es más fácil.

El tutorial concluye mostrando el sitio web completamente funcional y desplegado, con sus modos oscuro y claro, invitando a los espectadores a explorar el código y el curso de ReactJS del autor.